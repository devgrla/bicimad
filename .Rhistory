# Toma el conjunto de datos `airquality` y disponlo en formato largo. Ten cuidado con
# la definición de la clave de la tabla.
head(airquality)
tmp<- melt(airquality, id.vars = c("Month", "Day"))
library(reshape2)
tmp<- melt(airquality, id.vars = c("Month", "Day"))
head(tmp)
setwd("C:/Users/Xseed/bicimad")
library(rjson)
res <- fromJSON('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
res <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
library(rjson)
res <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
library(jsonlite)
res <- fromJSON('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
res$data
names(res$data)
class(res$data)
tmp<- fromJson(res$data)
tmp<- fromJSON(res$data)
tmp
class(tmp)
library(plyr)
tmp<- ldpply(tmp$stations, as.data.frame)
tmp<- ldply(tmp$stations, as.data.frame)
class(tmp)
tmp
tmp<- ldply(tmp, as.data.frame)
class(tmp)
tmp
tmp<- fromJSON(res$data)
class(tmp$stations)
tmp
tmp
names(tmp)
names(tmp$stations)
tmp$stations$light <- NULL
tmp$stations$activate <- NULL
tmp$stations$no_available <- NULL
colnames(tmp$stations) <- c('id', 'latitud', 'longitud', 'nombre', 'numero', 'direccion', 'total_bases', 'total_disponibles'. 'total_ocupadas', 'reservas')
colnames(tmp$stations) <- c('id', 'latitud', 'longitud', 'nombre', 'numero', 'direccion', 'total_bases', 'total_disponibles', 'total_ocupadas', 'reservas')
runExample(example = "01_hello")
library(shiny)
runExample(example = "06_tabsets")
runApp("estacionesbicimad")
runApp("R/estacionesbicimad")
runApp("R/estacionesbicimad")
runApp('R/estacionesbicimad')
runApp()
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
library(shiny)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
library(DT)
install.packages("DT")
library(DT)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
library(leaflet)
install.packages("leaflet")
library(ggmap)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
unizar <- geocode('Teatro Amaya, Madrid, España',
source = "google")
unizar
class(unizar)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
stations$estado_estacion <- apply(stations, 1, get_status)
library(rjson)
library(plyr)
library(ggmap)
register_google("AIzaSyCjQ7z4QwZUU7l1U8iBJ6ASX_srvbdZfNk", write = TRUE)
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations<- ldply(stations$stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations$latitude <- as.numeric(as.character(stations$latitude))
stations$longitude <- as.numeric(as.character(stations$longitude))
stations$ocupacion <- (stations$dock_bikes / stations$total_bases) * 100
unizar <- geocode('Teatro Amaya, Madrid, España',
source = "google")
map.unizar <- get_map(location = as.numeric(unizar),
color = "color",
maptype = "roadmap",
scale = 2,
zoom = 13)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude),
data = stations, colour = 'red',
size = 2)
get_status <- function(ocupacion){
if(ocupacion> 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude,colour=estado_estacion),
data = stations,
size = 2)
library(rjson)
library(plyr)
library(ggmap)
register_google("AIzaSyCjQ7z4QwZUU7l1U8iBJ6ASX_srvbdZfNk", write = TRUE)
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations<- ldply(stations$stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations$latitude <- as.numeric(as.character(stations$latitude))
stations$longitude <- as.numeric(as.character(stations$longitude))
stations$ocupacion <- (stations$dock_bikes / stations$total_bases) * 100
unizar <- geocode('Teatro Amaya, Madrid, España',
source = "google")
library(rjson)
library(plyr)
library(rjson)
library(plyr)
library(ggmap)
register_google("AIzaSyCjQ7z4QwZUU7l1U8iBJ6ASX_srvbdZfNk", write = TRUE)
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations<- ldply(stations$stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations$latitude <- as.numeric(as.character(stations$latitude))
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations<- ldply(stations$stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations
library(dplyr)
library(ggmap)
register_google("AIzaSyCjQ7z4QwZUU7l1U8iBJ6ASX_srvbdZfNk", write = TRUE)
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations<- ldply(stations$stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
stations
stations<- ldply(stations, as.data.frame) #Tomo una lista y la convierto a dataframe
stations
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
class(stations)
class(stations$stations)
stations<- stations$stations
stations$latitude <- as.numeric(as.character(stations$latitude))
stations$longitude <- as.numeric(as.character(stations$longitude))
stations$ocupacion <- (stations$dock_bikes / stations$total_bases) * 100
unizar <- geocode('Teatro Amaya, Madrid, España',
source = "google")
map.unizar <- get_map(location = as.numeric(unizar),
color = "color",
maptype = "roadmap",
scale = 2,
zoom = 13)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude),
data = stations, colour = 'red',
size = 2)
get_status <- function(ocupacion){
if(ocupacion> 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude,colour=estado_estacion),
data = stations,
size = 2)
get_status <- function(x){
ocupacion<- as.numeric(x[14])
if(ocupacion> 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude,colour=estado_estacion),
data = stations,
size = 2)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
get_status <- function(x){
ocupacion<- as.numeric(x[14])
if(ocupacion > 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
get_status <- function(x){
ocupacion<- as.numeric(x[14])
if(ocupacion> 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
res <- fromJSON('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations<- fromJSON(res$data)$stations
#Elimino algunas columnas del dataframe y le cambio el nombre a las columnas
stations$light <- NULL
stations$activate <- NULL
stations$no_available <- NULL
colnames(stations) <- c('id', 'latitud', 'longitud', 'nombre', 'numero', 'direccion', 'total_bases', 'total_disponibles', 'total_ocupadas', 'reservas')
stations$latitud <- as.numeric(as.character(stations$latitud))
stations$longitud <- as.numeric(as.character(stations$longitud))
stations$ocupacion <- (stations$total_disponibles / stations$total_bases) * 100
get_status <- function(x){
ocupacion <- as.numeric(x[14])
if(ocupacion > 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
stations$estado_estacion <- apply(stations, 1, get_status)
register_google("AIzaSyCjQ7z4QwZUU7l1U8iBJ6ASX_srvbdZfNk", write = TRUE)
stations <- readLines('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations <- paste(stations, collapse = " ")
stations <- fromJSON(stations)
stations <- stations['data']
stations<- fromJSON(stations[[1]])
class(stations$stations)
stations<- stations$stations
stations$latitude <- as.numeric(as.character(stations$latitude))
stations$longitude <- as.numeric(as.character(stations$longitude))
stations$ocupacion <- (stations$dock_bikes / stations$total_bases) * 100
unizar <- geocode('Teatro Amaya, Madrid, España',
source = "google")
map.unizar <- get_map(location = as.numeric(unizar),
color = "color",
maptype = "roadmap",
scale = 2,
zoom = 13)
ggmap(map.unizar) + geom_point(aes(x = longitude, y = latitude),
data = stations, colour = 'red',
size = 2)
get_status <- function(x){
ocupacion<- as.numeric(x[14])
if(ocupacion> 75){
return ('Disponibilidad > 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('Disponibilidad 50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('Disponibilidad 25-50%')
} else{
return('Disponibilidad < 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
stations <- stations[order(stations$ocupacion),]
res <- fromJSON('https://rbdata.emtmadrid.es:8443/BiciMad/get_stations/WEB.SERV.gaston@gutrade.io/1326B978-2486-479C-B76E-15C4838F9345')
stations<- fromJSON(res$data)$stations
#Elimino algunas columnas del dataframe y le cambio el nombre a las columnas
stations$light <- NULL
stations$activate <- NULL
stations$no_available <- NULL
colnames(stations) <- c('id', 'latitud', 'longitud', 'nombre', 'numero', 'direccion', 'total_bases', 'total_disponibles', 'total_ocupadas', 'reservas')
stations$longitud <- as.numeric(as.character(stations$longitud))
stations$latitud <- as.numeric(as.character(stations$latitud))
stations$ocupacion <- (stations$total_disponibles / stations$total_bases) * 100
get_status <- function(x){
ocupacion<- as.numeric(x[11])
if(ocupacion> 75){
return ('> 75%')
} else if (ocupacion > 50 & ocupacion < 75 ){
return('50-75%')
} else if (ocupacion > 25 & ocupacion < 50 ){
return('25-50%')
} else{
return('< 25%')
}
}
stations$estado_estacion <- apply(stations, 1, get_status)
stations <- stations[order(stations$ocupacion),]
stations
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
library(plotly)
install.packages("ggploty")
install.packages("ploty")
install.packages("plotly")
library(plotly)
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
runApp('R/estacionesbicimad')
