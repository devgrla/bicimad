latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201708ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
a<-rbind(a,data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart))
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
#Setiembre
a<-c()
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
a<-rbind(a,data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart))
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
head(a)
library(rjson)
library(dplyr)
library(plyr)
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ad")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201709ae")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201710aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201710ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201710ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
#Encabezado del csv que voy a guardar
write.table(data.frame('oid', 'geo_type', 'longitude', 'latitude', 'type',
'address', 'speed', 'secondsfromstart'), 'movimientos_coordenadas2018_oct.csv'  , append= T, sep=';', col.names=FALSE )
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2018_oct.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201810aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201810ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201810ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201810ad")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
#Encabezado del csv que voy a guardar
write.table(data.frame('oid', 'geo_type', 'longitude', 'latitude', 'type',
'address', 'speed', 'secondsfromstart'), 'movimientos_coordenadas2018_nov.csv'  , append= T, sep=';', col.names=FALSE )
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2018_nov.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
#Encabezado del csv que voy a guardar
write.table(data.frame('oid', 'geo_type', 'longitude', 'latitude', 'type',
'address', 'speed', 'secondsfromstart'), 'movimientos_coordenadas2018_nov.csv'  , append= T, sep=';', col.names=FALSE )
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2018_nov.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2018_nov.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201811ad")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
#Encabezado del csv que voy a guardar
write.table(data.frame('oid', 'geo_type', 'longitude', 'latitude', 'type',
'address', 'speed', 'secondsfromstart'), 'movimientos_coordenadas2018_dic.csv'  , append= T, sep=';', col.names=FALSE )
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2018_dic.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201812aa")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201812ab")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Desktop/Bicimad/201812ac")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
library(datetime)
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xaa.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
f<- function(var) {
unplug_hourtime<- format(as.datetime(var$unplug_hourTime$`$date`), format = '%Y-%m-%d %H:%M', mark=TRUE)
oid<- var$`_id`
user_day_code <- var$user_day_code
idunplug_station <- as.numeric(var$idunplug_station)
idplug_station <- as.numeric(var$idplug_station)
idunplug_base<- as.numeric(var$idunplug_base)
idplug_base <- as.numeric(var$idplug_base)
travel_time <- as.numeric(var$travel_time)
user_type_code <- as.numeric(var$user_type)
age_range_code <- as.numeric(var$ageRange)
zip_code <- var$zip_code
write.table(data.frame(oid, user_day_code, idplug_base, user_type_code, idunplug_base,
travel_time, idunplug_station, age_range_code, idplug_station,
unplug_hourtime, zip_code), 'movimientos_enero2019.csv'  , append= T, sep=';', col.names=FALSE )
}
lapply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xab.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
lapply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xac.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
lapply(tmp$root[], f)
library(rjson)
library(dplyr)
library(plyr)
library(rjson)
library(dplyr)
library(plyr)
#Encabezado del csv que voy a guardar
write.table(data.frame('oid', 'geo_type', 'longitude', 'latitude', 'type',
'address', 'speed', 'secondsfromstart'), 'movimientos_coordenadas2019_ene.csv'  , append= T, sep=';', col.names=FALSE )
f<- function(var) {
for (feature in var$track$features[]){
oid<- var$`_id`
geo_type<-feature$geometry$type
latitude<-feature$geometry$coordinates[[1]]
longitude<-feature$geometry$coordinates[[2]]
type<- feature$type
address<-feature$properties$var
speed<-feature$properties$speed
secondsfromstart<-feature$properties$secondsfromstart
write.table(data.frame(oid, geo_type, latitude, longitude, type,
address, speed, secondsfromstart), 'movimientos_coordenadas2019_ene.csv'  , append= T, sep=';', col.names=FALSE )
}
}
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xaa.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xab.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
kk <- readLines("C:/Users/Xseed/Google Drive/EAE/TFM - Datos y documentos/Datos y descripciÃ³n/Datos/BiciMad/Movimientos Sin procesar/xac.json")
kk= paste(kk, collapse="")
tmp <- fromJSON(kk)
rm(kk)
ldply(tmp$root[], f)
set.seed(155)
n <- 1000
x1 <- runif(n)
x1
x2 <- runif(n, -2, 2)
x2
y <- -.9 + .3 * x1 - .2 * x2^2 + rnorm(n, 0, .1)
dat <- data.frame(x1, x2, y)
dat
modelo0 <- lm(y ~ x1 + x2, data = dat)
summary(modelo0)
frac_train <- .6 #60% para entrenamiento.
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
train_val <- split(dat, mascara)
modelo_train_val <- lm(y ~ x1 + x2, data = train_val$train)
preds <- predict(modelo_train_val, train_val$validation)
real  <- train_val$validation$y
plot(preds, real)
abline(a = 0, b = 1, col = "red")
my_rmse <- sqrt(mean((real - preds)^2))
my_rmse
n_groups <- 10
mascara <- sample(rep(1:10, n / n_groups), n) #SEPARA EL GRUPO DE DATOS EN 10 GRUPOS - 100 ELEMENTOS EN CADA GRUPO.
tmp <- lapply(1:n_groups, function(i){
modelo <- lm(y ~ x1 + x2, data = dat[mascara != i,])
tmp <- dat[mascara == i,]
tmp$preds <- predict(modelo, tmp)
tmp
})
TMP
tmp
res <- do.call(rbind, tmp)
rmse_simulation <- function(){
tmp <- sample(1:nrow(dat), n, replace = TRUE)
tmp <- dat[tmp,]
modelo <- lm(y ~ x1 + x2, data = tmp)
preds <- predict(modelo, dat)
sqrt(mean((dat$y - preds)^2))
}
res <- replicate(100, rmse_simulation())
mean(res)
hist(res)
tmp
tmp$preds
n_groups <- 10
mascara <- sample(rep(1:10, n / n_groups), n) #SEPARA EL GRUPO DE DATOS EN 10 GRUPOS - 100 ELEMENTOS EN CADA GRUPO.
tmp <- lapply(1:n_groups, function(i){
modelo <- lm(y ~ x1 + x2, data = dat[mascara != i,])
tmp <- dat[mascara == i,]
tmp$preds <- predict(modelo, tmp)
tmp
})
res <- do.call(rbind, tmp)
head(res)
# Ejercicio: calcula el RMSE
real  <- tmp$y
predict <- tmp$preds
my_rmse <- sqrt(mean((real - preds)^2))
my_rmse
n_groups <- 10
mascara <- sample(rep(1:10, n / n_groups), n) #SEPARA EL GRUPO DE DATOS EN 10 GRUPOS - 100 ELEMENTOS EN CADA GRUPO.
tmp <- lapply(1:n_groups, function(i){
modelo <- lm(y ~ x1 + x2, data = dat[mascara != i,])
tmp <- dat[mascara == i,]
tmp$preds <- predict(modelo, tmp)
tmp
})
res <- do.call(rbind, tmp)
# Ejercicio: calcula el RMSE
real  <- res$y
predict <- res$preds
my_rmse <- sqrt(mean((real - preds)^2))
preds <- res$preds
my_rmse <- sqrt(mean((real - preds)^2))
my_rmse
res
# Ejercicio: compara grÃ¡ficamente los valores reales y predichos
plot(preds, real)
frac_train <- .6 #60% para entrenamiento.
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
train_val <- split(dat, mascara)
modelo_train_val <- lm(y ~ x1 + x2, data = train_val$train)
preds <- predict(modelo_train_val, train_val$validation)
real  <- train_val$validation$y
plot(preds, real)
abline(a = 0, b = 1, col = "red")
my_rmse <- sqrt(mean((real - preds)^2))
my_rmse
n_groups <- 10
mascara <- sample(rep(1:10, n / n_groups), n) #SEPARA EL GRUPO DE DATOS EN 10 GRUPOS - 100 ELEMENTOS EN CADA GRUPO.
tmp <- lapply(1:n_groups, function(i){
modelo <- lm(y ~ x1 + x2, data = dat[mascara != i,])
tmp <- dat[mascara == i,]
tmp$preds <- predict(modelo, tmp)
tmp
})
res <- do.call(rbind, tmp)
res
# Ejercicio: calcula el RMSE
real  <- res$y
preds <- res$preds
my_rmse <- sqrt(mean((real - preds)^2))
my_rmse
tmp_real <- lapply(1:n_groups, function(i){
modelo <- lm(y ~ x1 + I(x2^2), data = dat[mascara != i,])
tmp <- dat[mascara == i,]
tmp$preds <- predict(modelo, tmp)
tmp
})
res2 <- do.call(rbind, tmp_real)
res2
# Ejercicio: calcula el RMSE
real2  <- res2$y
preds2 <- res2$preds
my_rmse_real <- sqrt(mean((real2 - preds2)^2))
my_rmse_real
# Ejercicio: compara grÃ¡ficamente los valores reales y predichos
plot(preds, real)
abline(a = 0, b = 1, col = "red")
source('~/R/src/01_ajuste_modelos.R', encoding = 'UTF-8')
set.seed(155)
n <- 1000
x1 <- runif(n)
x2 <- runif(n, -2, 2)
y <- -.9 + .3 * x1 - .2 * x2^2 + rnorm(n, 0, .1) #esto ultimo es el error irreducible. Por lo gral no lo ves, ni sabes cuanto ni donde hay.
dat <- data.frame(x1, x2, y)
# vamos a tratar de ajustarlo usando el modelo lineal (incorrecto) y ~ x1 + x2
modelo0 <- lm(y ~ x1 + x2, data = dat) #Es el modelo incorrecto, le falta el cuadrado al x2. Por eso dan cualquier cosa los coeficientes
summary(modelo0)
modelo1 <- lm(y ~ x1 + I(x2^2), data = dat) #Es el modelo incorrecto, le falta el cuadrado al x2. Por eso dan cualquier cosa los coeficientes
summary(modelo1)
source('~/R/src/01_ajuste_modelos.R', encoding = 'UTF-8')
frac_train <- .6 #60% para entrenamiento.
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
train_val <- split(dat, mascara) #Me los separa segun la mascara
modelo_train_val <- lm(y ~ x1 + x2, data = train_val$train) #Uso los de entrenamiento
preds <- predict(modelo_train_val, train_val$validation)
real  <- train_val$validation$y
train_val$train$y
# Ejercicio: compara grÃ¡ficamente los valores reales y predichos
plot(preds, real)
abline(a = 0, b = 1, col = "red")
?abline
source('~/R/src/01_ajuste_modelos.R', encoding = 'UTF-8')
n <- 1000
x1 <- runif(n)
x2 <- runif(n, -2, 2)
y <- -.9 + .3 * x1 - .2 * x2^2 + rnorm(n, 0, .1) #esto ultimo es el error irreducible. Por lo gral no lo ves, ni sabes cuanto ni donde hay.
dat <- data.frame(x1, x2, y)
# vamos a tratar de ajustarlo usando el modelo lineal (incorrecto) y ~ x1 + x2
modelo0 <- lm(y ~ x1 + x2, data = dat) #Es el modelo incorrecto, le falta el cuadrado al x2. Por eso dan cualquier cosa los coeficientes
summary(modelo0)
setwd("C:\Users\Xseed\bicimad")
setwd("C:/Users/Xseed/bicimad")
